# dependencies: [telegram_bot, scheduler]
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å "–ò–° –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å" (–ø—Ä–æ—Å—Ç–∏–≥–æ—Å–ø–æ–¥–∏) –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Å –õ–ö
"""

import json
import requests
from bs4 import BeautifulSoup
import time


def start_new_session() -> requests.session:
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏. –§—É–Ω–∫—Ü–∏—è —á–∏—Å—Ç–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ –≥–æ—Ä–æ–¥–∏—Ç—å —ç—Ç–æ—Ç –æ–≥–æ—Ä–æ–¥ –≤ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö.

    :return requests.session: —Å–µ—Å—Å–∏—è
    """

    headers = {'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:45.0) Gecko/20100101 Firefox/45.0'}
    session = requests.session()
    session.headers = headers

    return session


def auth_in_lk(session, email, password) -> tuple:
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –õ–ö –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.
    –ü—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, –Ω–∞—Å–∫–æ–ª—å–∫–æ —è –ø–æ–Ω—è–ª - –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π XSRF-TOKEN –∏ lk_etu_ru_session –≤ cookies.

    :param requests.session session: —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è (requests.session())
    :param str email: email, –æ–Ω –∂–µ –ª–æ–≥–∏–Ω –æ—Ç –õ–ö
    :param str password: –ø–∞—Ä–æ–ª—å –æ—Ç –õ–ö
    :return tuple: –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∫–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–µ—Å—Å–∏–∏: [code, session]
    """
    url_login = 'https://lk.etu.ru/login'
    data = session.get(url_login)

    soup = BeautifulSoup(data.text, "html.parser")
    token = soup.find('input', {'name': '_token'}).attrs['value']
    datapost = {'_token': token,
                'email': email,
                'password': password}
    data_ans = session.post(url_login, data=datapost)

    code = data_ans.status_code

    if code == 200 and data_ans.url == 'https://lk.etu.ru/login':  # –≤ —Å–ª—É—á–∞–µ –Ω–µ–≤–µ—Ä–Ω—ã—Ö —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è 200
        # –∏ –Ω–µ –ø—Ä–æ–∏—Ö—Å–æ–¥–∏—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏–∏ –Ω–∞ https://lk.etu.ru/student
        code = 419
    return code, session


def auth_in_attendance(session) -> tuple:
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ –ò–° –ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.
    –°–µ—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–∞ –≤ –õ–ö, –ª–∏–±–æ –≤ –Ω–µ–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–≥—Ä—É–∂–µ–Ω—ã –∫—É–∫–∏ XSRF-TOKEN –∏ lk_etu_ru_session.
    –ü—Ä–∏–∑–Ω–∞–∫ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –ø–æ–ª–µ connect.digital-attendance –≤ cookies —Å–µ—Å—Å–∏–∏.

    :param requests.session session: —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è (requests.session())
    :return tuple: –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∫–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏ —Å–µ—Å—Å–∏–∏: [code, session]
    """

    url_login = 'https://lk.etu.ru/oauth/authorize?response_type=code&redirect_uri=https%3A%2F%2Fdigital.etu.ru%2Fatt' \
                'endance%2Fapi%2Fauth%2Fredirect&client_id=29'  # —Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è, –ª—É—á—à–µ –±—Ä–∞—Ç—å –µ–µ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –∏–∑ –ª–∫
    data = session.get(url_login)
    soup = BeautifulSoup(data.text, "html.parser")
    token = soup.find('input', {'name': '_token'}).attrs['value']
    auth_token = soup.find('input', {'name': 'auth_token'}).attrs['value']
    state = soup.find('input', {'name': 'state'}).attrs['value']
    client_id = soup.find('input', {'name': 'client_id'}).attrs['value']

    datapost = {'_token': token,
                'auth_token': auth_token,
                'state': state,
                'client_id': client_id}

    data_ans = session.post('https://lk.etu.ru/oauth/authorize', data=datapost)

    code = data_ans.status_code
    return code, session


def get_info_from_attendance(session, all_data=False) -> tuple:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã —Å –ø–æ—Ä—Ç–∞–ª–∞: –≤—Ä–µ–º—è (–Ω—É –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–≥—É), –∏–Ω—Ñ–∞ –æ —Ç–µ–∫—É—â–µ–º —é–∑–µ—Ä–µ, –ø–∞—Ä—ã –∑–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    –ø–æ—Å–µ—â–µ–Ω–∏–π –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ all_data = True)

    :param requests.session session: —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è (requests.session())
    :return tuple: –∫–æ—Ä—Ç–µ–∂ –∏–∑ –∫–æ–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ—ã –æ –ø–∞—Ä–∞—Ö –∏ json-–æ—Ç–≤–µ—Ç–æ–≤:
    [code, time_data, user, checkin, alldata (if all_data, –∏–Ω–∞—á–µ –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å)]
    """
    url_time = 'https://digital.etu.ru/attendance/api/settings/time'
    url_user = 'https://digital.etu.ru/attendance/api/auth/current-user'
    url_checkin = 'https://digital.etu.ru/attendance/api/schedule/check-in'
    url_all = 'https://digital.etu.ru/attendance/api/schedule/stats/student'

    time_data = session.get(url_time).json()
    user = session.get(url_user).json()

    data_checkin = session.get(url_checkin)
    code = data_checkin.status_code
    checkin = data_checkin.json()

    alldata = session.get(url_all).json() if all_data else {}
    return code, time_data, user, checkin, alldata


def get_today_statistics(email, password, without_session=True, session=None) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç–º–µ—á–∞–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å.
    –î–∞, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞. –î–∞, –≤–æ–∑–º–æ–∂–Ω–æ –µ–µ –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –±–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π.
    –î–∞, –≤–æ–∑–º–æ–∂–Ω–æ —è –¥–∞–∂–µ —ç—Ç–æ —Å–¥–µ–ª–∞—é. –ù–æ –ø–æ–∫–∞ —Ç–∞–∫.

    :param str email: email, –æ–Ω –∂–µ –ª–æ–≥–∏–Ω –æ—Ç –õ–ö
    :param str password: –ø–∞—Ä–æ–ª—å –æ—Ç –õ–ö
    :param bool without_session: —Ñ–ª–∞–≥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é. –ï—Å–ª–∏ –¥–∞, —Ç–æ –Ω–∞–¥–æ –µ–µ –ø–µ—Ä–µ–¥–∞—Ç—å.
    :param requests.session session: —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è (requests.session())

    :return str: –æ—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    """
    if without_session:
        session = start_new_session()
    code, session = auth_in_lk(session, email, password)
    code, session = auth_in_attendance(session)
    code, time_data, user, checkin, alldata = get_info_from_attendance(session)

    answer = '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: \n\n'
    for lesson_elem in checkin:
        time_start = time.strptime(lesson_elem['start'], '%Y-%m-%dT%H:%M:%S.000%z')
        time_end = time.strptime(lesson_elem['end'], '%Y-%m-%dT%H:%M:%S.000%z')
        day_class = time_start.tm_yday
        day_now = time.gmtime(time.time()).tm_yday

        if day_now == day_class:
            lesson_name = lesson_elem['lesson']['shortTitle']
            subject_type = lesson_elem['lesson']['subjectType']
            self_reported = lesson_elem['selfReported']

            if self_reported:
                self_reported_ans = '‚úÖ'
            elif self_reported == False:  # –Ω–µ –Ω–∞–¥–æ –¥–µ–ª–∞—Ç—å elif not self_reported, —Ç.–∫. –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Ç–º–µ—Ç–∫–∏
                # —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ —É—Å–ª–æ–≤–∏–µ (—Ç–∏–ø Nonetype), –∞ –ø–æ –º–æ–µ–π –ª–æ–≥–∏–∫–µ –¥–æ–ª–∂–Ω–æ —Å—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ª–æ–≤–∏–µ else
                self_reported_ans = '‚ùå'
            else:
                self_reported_ans = 'üü¢'

            answer += f'{time_start.tm_hour:02}:{time_start.tm_min:02} - {time_end.tm_hour:02}:{time_end.tm_min:02}: ' \
                      f'{lesson_name} ({subject_type}): {self_reported_ans}\n'

    return answer



